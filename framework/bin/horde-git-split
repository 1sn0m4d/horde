#!/usr/bin/env php
<?php
/**
 * Usage examples:
 * ./horde-git-split --component imp
 * ./horde-git-split --component Imap_Client
 * ./horde-git-split --component Core -- horde_core-2.11.x
 * ./horde-git-split --component ansel -- ansel-ajax
 */

$branch_keep_app = array(
    'FRAMEWORK_4',
    'FRAMEWORK_5_0',
    'FRAMEWORK_5_1',
    'FRAMEWORK_5_2'
);
$branch_keep = array('master');


require_once 'Horde/Autoloader/Default.php';
$parser = new Horde_Argv_Parser(
    array(
        'usage' => "%prog\n\t--component=component\n\t[--tmpdir=tmpdir]\n\t[list of branches to keep]",
        'optionList' => array(
            new Horde_Argv_Option('-c', '--component', array(
                'action' => 'store',
                'help' => 'Application or framework library base directory',
                'dest' => 'component'
            )),
            new Horde_Argv_Option('-t', '--tmpdir', array(
                'action' => 'store',
                'help' => 'Temporary directory (memory FS) for git operations',
                'dest' => 'tmpdir'
            )),
            new Horde_Argv_Option('-o', '--output', array(
                'action' => 'store',
                'help' => 'Output directory where split repositories are placed.',
                'dest' => 'output'))
        )
    )
);
list($options, $argv) = $parser->parseArgs();

if (empty($options['component'])) {
    die("Need to specify --component.\n");
}
$package = basename($options['component']);


/* Add additional entries to branch keep list. */
$branch_keep = array_merge($branch_keep, $argv);

$base = dirname(realpath(dirname(__FILE__) . '/../'));
$package_path = null;

foreach (array('app' => '', 'lib' => 'framework/') as $key => $val) {
    $dir = $base . '/' . $val . $package . '/';
    if (is_dir($dir) && file_exists($dir . 'package.xml')) {
        switch ($key) {
        case 'app':
            $branch_keep = array_merge($branch_keep, $branch_keep_app);
        }

        $package_path = $val . $package;
        $tag_prefix = strtr(($val ? 'horde_' : '') . strtolower($package), '-', '_') . '-';
        break;
    }
}
if (is_null($package_path)) {
    exit("Invalid Horde component: " . $package . "\n");
}

$tmp = (empty($options['output']) ? sys_get_temp_dir() : $options['output']) . '/' . mt_rand() . '_' . $package;


print "Package: " . $package . "\n";
print "Tag prefix: " . $tag_prefix . "\n";
print "Temporary git directory: " . $tmp . "\n\n";

foreach ($branch_keep as $branch) {
    if (!shell_exec("git --work-tree=\"$base\" branch --list $branch")) {
        passthru("git --work-tree=\"$base\" branch --track $branch origin/$branch");
    }
}
mkdir($tmp);
chdir($tmp);
passthru('git clone --bare ' . escapeshellarg($base) . ' tmp');
chdir($tmp . '/tmp');
passthru('git remote rm origin');

$delete = array();
foreach (array_filter(explode("\n", shell_exec('git tag -l'))) as $val) {
    if (strpos($val, $tag_prefix) === 0) {
        $version = preg_replace('/^' . $tag_prefix . '/', '', $val);
        passthru('git tag ' . escapeshellarg('v' . $version) . ' ' . escapeshellarg($val));
    }
    $delete[] = escapeshellarg($val);
}
if (count($delete)) {
    printf("Deleting %d tags...\n", count($delete));
    shell_exec('git tag -d ' . implode(' ', $delete));
}

$delete = array();
foreach (array_filter(explode("\n", shell_exec('git branch --no-color'))) as $val) {
    $val = trim(preg_replace("/^\s*\*\s/", '', $val));
    if (!in_array($val, $branch_keep)) {
        $delete[] = escapeshellarg($val);
    }
}
if (count($delete)) {
    passthru('git branch -D ' . implode(' ', $delete));
}

/* Using tmpfs filesystem for filter-branch reportedly provides much faster
 * performance. */
$tmpfs = empty($options['tmpdir'])
    ? $tmp
    : $options['tmpdir'];
$tmpfs .= '/' . mt_rand();

passthru("git filter-branch -d " . escapeshellarg($tmpfs) . " --prune-empty --subdirectory-filter " . $package_path . " --tag-name-filter cat -- --all");
passthru('git update-ref -d refs/original/refs/heads/master');
passthru('git reflog expire --expire=now --all');
chdir($tmp);
passthru('git clone --bare file://' . $tmp . '/tmp split');

/* Delete temporary directory. */
delTree($tmp . '/tmp');

print "\nSplit repo in: " . $tmp . "/split\n";


function delTree($dir) {
    $files = array_diff(scandir($dir), array('.', '..'));
    foreach ($files as $file) {
        if (is_dir("$dir/$file") && !is_link($dir)) {
            delTree("$dir/$file");
        } else {
            unlink("$dir/$file");
        }
    }
    rmdir($dir);
}
