#!/usr/bin/env php
<?php
/**
 * Script to install a horde installation in a web-accessible directory,
 * while allowing changes made to the repository source to also be reflected
 * in the local installation.
 *
 * Requires the file 'install_dev.conf' to live in the same directory as
 * this script.
 *
 * @author Michael Slusarz <slusarz@horde.org>
 */

require_once dirname(__FILE__) . '/install_dev.conf';

$horde_git = rtrim(ltrim($horde_git), '/ ');
$web_dir = rtrim(ltrim($web_dir), '/ ');

print "EMPTYING old web directory " . $web_dir . "\n";
$it = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($web_dir), RecursiveIteratorIterator::CHILD_FIRST);
while ($it->valid()) {
    if (!$it->isDot()) {
        if ($it->isLink()) {
            if ($debug) {
                print "DELETING LINK: " . $it->key() . "\n";
            }
            unlink($it->key());
        } elseif ($it->isDir()) {
            if ($debug) {
                print "DELETING DIR: " . $it->key() . "\n";
            }
            rmdir($it->key());
        } elseif ($it->isFile()) {
            if ($debug) {
                print "DELETING FILE: " . $it->key() . "\n";
            }
            unlink($it->key());
        }
    }
    $it->next();
}

if (!empty($git)) {
    print "\nUPDATING repository\n";
    system('cd ' . $horde_git . ';' . $git);
}

print "\nLINKING horde\n";
file_put_contents($horde_git . '/horde/config/horde.local.php', "<?php ini_set('include_path', '{$web_dir}/libs' . PATH_SEPARATOR . ini_get('include_path'));");
$it = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($horde_git . '/horde'), RecursiveIteratorIterator::SELF_FIRST);
while ($it->valid()) {
    if (!$it->isDot()) {
        if ($it->isDir()) {
            if ($debug) {
                print "CREATING DIR: " . $web_dir . '/' . $it->getSubPathName() . "\n";
            }
            mkdir($web_dir . '/' . $it->getSubPathName());
        } else {
            if ($debug) {
                print "LINKING FILE: " . $web_dir . "/" . $it->getSubPathName() . "\n";
            }
            symlink($it->key(), $web_dir . '/' . $it->getSubPathName());
        }
    }
    $it->next();
}

if (!empty($static_group)) {
    if ($debug) {
        print "\nCHGRP/CHMOD static directory\n";
    }
    chgrp($web_dir . '/static', $static_group);
    chmod($web_dir . '/static', $static_mode);
}

print "\nLINKING framework\n";
mkdir($web_dir . '/libs');
system(dirname(__FILE__) . '/install_framework --src ' . $horde_git . '/framework --dest ' . $web_dir . '/libs');

print "\nLINKING applications to web directory " . $web_dir . "\n";
foreach ($apps as $app) {
    if (file_exists($horde_git . '/' . $app)) {
        print "LINKING " . $app . "\n";
        symlink($horde_git . '/' . $app, $web_dir . '/' . $app);
        file_put_contents($horde_git . '/' . $app . '/config/horde.local.php', '<?php define(\'HORDE_BASE\', \'' . $web_dir . '\');');
    }
}
