#!/usr/bin/env php
<?php

// Setting basics
require_once 'Horde/Autoloader/Default.php';
set_error_handler(function() { var_dump(func_get_args()); exit; });
$base = __DIR__ . '/../..';
$keepBranches = array(
    'ansel' => 'ANSEL_4_0',
    'jonah' => 'jonah-share-content',
    'kronolith' => 'kronolith-mobile',
    'passwd' => 'passwd_5_1',
    'Autoloader' => 'h5-autoloader',
    'Controller' => 'horde_controller2',
    'Core' => 'horde_core-2.11.x',
    'Dav' => 'horde_dav-1.1.x',
    'Db' => 'horde_db_mssql',
    'Icalendar' => 'H4-Icalendar',
    'Vfs' => 'H4-Vfs',
);

// Load configuration
require __FILE__ . '.conf';
if (empty($git['token'])) {
    exit("GitHub access not configured.");
}

// Initialize GitHub client
$api = 'https://api.github.com/orgs/' . $git['orga'];
$client = new Horde_Http_Client(array(
    'request.username' => $git['account'],
    'request.password' => $git['token'],
    'request.authenticationScheme' => Horde_Http::AUTH_BASIC,
));

// Get existing repositories
$url = $api . '/repos';
$repos = array();
while ($url) {
    $response = $client->get($url);
    foreach (json_decode($response->getBody()) as $repo) {
        $repos[] = $repo->name;
    }
    $url = null;
    if ($link = $response->getHeader('link')) {
        $links = explode(', ', $link);
        foreach ($links as $link) {
            $link = explode('; ', $link);
            if ($link[1] == 'rel="next"') {
                $url = trim($link[0], '<>');
            }
        }
    }
}

// Run through framework libraries.
foreach (array_reverse(glob($base . '/framework/[A-Z]*')) as $package) {
    $package = basename($package);
    if (in_array($package, $repos)) {
        echo "$package exists, skipping.\n";
        continue;
    }
    passthru(
        $base . '/framework/bin/horde-git-split'
        . ' --component "' . $package. '"'
        . ' --output "' . $work_dir . '"'
        . ' --tmpdir "' . $tmp_dir . '"'
        . ' --noprefix '
        . (isset($keepBranches[$package]) ? $keepBranches[$package] : '')
    );
    $target = $work_dir . '/' . $package . '/split';
    $xml = $base . '/framework/' . $package . '/package.xml';
    if (file_exists($xml)) {
        $pear = new Horde_Pear_Package_Xml($xml);
        $description = $pear->getDescription();
        file_put_contents($target . '/description', $description);
    } else {
        $description = '';
    }
    $client->post(
        $api . '/repos',
        json_encode(array(
            'name' => $package,
            'has_issues' => false,
            'has_wiki' => false,
            'homepage' => 'https://www.horde.org/libraries/Horde_' . $package,
            'description' => $description
        ))
    );
    passthru(
        'git -C "' . $target . '" push --mirror "git@github.com:'
        . $git['orga'] . '/' . $package . '.git"'
    );
    sleep(1);
}
